#pragma once

namespace rc {
namespace state {
namespace gen {

/// Given a type list of command types, returns a generator which randomly
/// generates one of them. The command will be generated by constructing
/// it either using a constructor taking the current state as as the only
/// parameter or using the default constructor if there is no such constructor.
/// Since the construction is done inside of a `gen::exec`, The command can
/// generate all of the needed values in its constructor using the
/// `Gen::operator*`. If the particular command is not valid for that state, it
/// can discard itself immediately using `RC_PRE` or `RC_DISCARD` in the
/// constructor so that another one may be tried. This can be used as the
/// generator function parameter of `check`
template <typename Cmd, typename... Cmds>
Gen<std::shared_ptr<const typename Cmd::CommandType>>
execOneOf(const typename Cmd::Model &state);

} // namespace gen
} // namespace state
} // namespace rc

#include "ExecCommands.hpp"
